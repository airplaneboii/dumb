class DumbAgent():
    je bolj ali manj končan, tako da ne rabi nič dela.

class StarvingPaccy():
    - Naredi, da lahko namensko uporabi token (da prestraši nasprotnika)
    - Naredi opcijo, da preveri, če je nasprotnik scared -> če je, naj ga ali poje ali ignorira
    - Naredi, da če ima duhca v blizini, naj ne hodi v pasti. Ce je v njej, naj jo poskusi zapustiti.
    - Naredi, da če ima zasledovalca dovolj daleč, da še zmeraj lahko kaj spotoma poje (naredi to tako,
      da se lahko po potrebi odstrani -> ne vem, kako dobra ideja sploh je to (dobra samo če se striktno izogiba pastem))
    - V attacku se včasih zgubi (hodi naprej in nazaj oziroma stoji na mestu (če je v pasti)) - ko je v bližini ghost - Tomaž (naj bi zdaj delalo)
    - včasih se iz svoje strani vrne naravnost v nasprotnika - ugotovi, zakaj (and fix it)
    - [naredi, da na nasprotnikovi polovici en preveri samo za ghoste, ampak tudi za pacmane
      (se bodo pojavili, ko je dovolj blizu svoje polovice) -> naj jih zasleduje in poje]-Domen (mislim, da zdaj dela)
    - v my_state.is_pacman:, if len(ghosts) > 0: Preveri, kaj je smiselno
    - naj gre v defense mode v ce mu zmanjkuje časa (delno že implementirano)
    - 

class LittleGhostie():
    - [Če je scared, nima pojma kaj dela (brezglavo leta naokoli) (tudi potem se ne vrne domov) - Tomaž (delam na tem)] (zgleda da dela) - Domen
    - [Če je v napadu, je zgubljen (nima pojma, kaj dela) - Tomaž (povezano z zgoraj)] (zgleda da dela) - Domen
    - Naredi, da ko se nič posebnega ne dogaja, da ne čaka samo v okolici največje gostote kovančkov,
      ampak tudi čim bližje nasprotnikovi polovici (tako da gre lahko tudi kaj pobrat, če utegne)
    - Poskusi različne načine iskanja uteži, kje naj čaka - uporabi clustering in na podlagi tega poskusi
      najti nek čim boljši način.
    

Poskusi uporabiti čim več njihovih funkcij ... za pozicije, razdalje in podobno je ogromno že narejenega.
Če kaj ne veš, kje bi našel, pomisli, zakaj bi igra to rabila (pač za izvajanje) in išči potem kako igra
dela v situaciji, kjer bi rabila tisto funkcijo.

Po potrebi posodabljaj ta file.

Ko bodo zgornje faze narejene, je čas za testiranje - prekopiraj kodo v več agentov, potem pa naj tekmujejo med sabo.
Opazuj dobre in slabe lastnosti ter prilagajaj uteži.

Kljub nekaterim izboljšavam, v nekaterih situacijah slabše kot prej ...